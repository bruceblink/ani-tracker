name: Rust CI & Fly Deploy

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.gitignore'
      - '.gitattributes'
      - 'picture/**'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.8.0
  SQLX_FEATURES: "rustls,postgres"
  APP_USER: app
  APP_USER_PWD: secret
  APP_DB_NAME: newsletter

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: ani_tracker
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install sqlx-cli
        run: cargo install sqlx-cli --version=${{ env.SQLX_VERSION }} --features ${{ env.SQLX_FEATURES }} --no-default-features --locked
      - name: Install system deps
        run: sudo apt-get update && sudo apt-get install -y postgresql-client pkg-config libglib2.0-dev libcairo2-dev libgdk-pixbuf2.0-dev libgtk-3-dev
      - name: Create app user in Postgres
        run: |
          CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PWD}';"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${CREATE_QUERY}"
          GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${GRANT_QUERY}"
      - name: Ensure scripts executable
        run: chmod +x ./scripts/*.sh
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh
      - name: Run tests
        run: cargo test
      - name: Check SQLX queries
        run: cargo sqlx prepare --workspace --check -- --all-targets

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rustfmt
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    env:
      SQLX_OFFLINE: true
    steps:
      - uses: actions/checkout@v4
      - name: Install Clippy
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
      - name: Lint
        run: cargo clippy -- -D warnings

  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    needs: [test]   # 只依赖测试通过
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: ani_tracker
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust with LLVM
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: llvm-tools-preview
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Install system deps
        run: sudo apt-get update && sudo apt-get install -y postgresql-client pkg-config libglib2.0-dev libcairo2-dev libgdk-pixbuf2.0-dev libgtk-3-dev
      - name: Ensure scripts executable
        run: chmod +x ./scripts/*.sh
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh
      - name: Generate coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      - name: Generate HTML report
        run: cargo llvm-cov report --html --output-dir coverage
      - uses: actions/upload-artifact@v4
        with:
          name: "Coverage report"
          path: coverage/

  fly-deploy:
    name: Fly Deploy
    runs-on: ubuntu-latest
    needs: [test, coverage]   # ✅ 依赖测试和 coverage
    concurrency: deploy-group
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
