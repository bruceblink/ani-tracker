name: Rust CI & Fly Deploy

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.gitignore'
      - '.gitattributes'
      - 'picture/**'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: "0.8.0"
  SQLX_FEATURES: "rustls,postgres"
  APP_USER: app
  APP_USER_PWD: secret
  APP_DB_NAME: newsletter

jobs:
  ci:
    name:  CI fmt, clippy, test, coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: ani_tracker
        ports:
          - 5432:5432
    steps:
      # 1️⃣ 下载仓库代码
      - uses: actions/checkout@v4

      # 2️⃣ 缓存 Cargo registry，加速依赖下载
      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: cargo-registry-

      # 3️⃣ 缓存 Cargo target 目录，加速重复构建
      - name: Cache Cargo target
        uses: actions/cache@v3
        with:
          path: target
          key: cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: cargo-target-

      # 4️⃣ 安装 Rust 工具链及必要组件
      - name: Install Rust with tools
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt,clippy,llvm-tools-preview

      # 5️⃣ 安装系统依赖（Postgres 客户端 + pkg-config）
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            postgresql-client \
            pkg-config \
            libglib2.0-dev \
            libcairo2-dev \
            libgdk-pixbuf2.0-dev \
            libgtk-3-dev

      # 6️⃣ 安装 sqlx-cli，用于数据库迁移和 SQL 检查
      - name: Install sqlx-cli
        run: cargo install sqlx-cli --version=${{ env.SQLX_VERSION }} --features ${{ env.SQLX_FEATURES }} --no-default-features --locked

      # 7️⃣ 等待 Postgres 服务启动完成
      - name: Wait for Postgres to be ready
        run: |
          for i in {1..20}; do
            PGPASSWORD=password psql -h localhost -U postgres -c '\l' && break
            echo "Waiting for Postgres..."
            sleep 2
          done

      # 8️⃣ 创建应用数据库用户并授予权限
      - name: Create app user in Postgres
        run: |
          CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PWD}';"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${CREATE_QUERY}"
          GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${GRANT_QUERY}"

      # 9️⃣ 确保本地脚本可执行
      - name: Ensure scripts executable
        run: chmod +x ./scripts/*.sh

      # 🔟 执行数据库迁移
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh

      # 1️⃣1️⃣ 格式检查
      - name: Check formatting
        run: cargo fmt -- --check

      # 1️⃣2️⃣ Clippy 代码静态分析
      - name: Run Clippy
        run: cargo clippy -- -D warnings

      # 1️⃣3️⃣ 运行单元测试（禁用 GUI 相关特性，避免 soup3-sys 报错）
      - name: Run tests
        run: cargo test

      # 1️⃣4️⃣ 检查 SQLX 查询是否过期
      - name: Check SQLX queries
        run: cargo sqlx prepare --workspace --check -- --all-targets

      # 1️⃣5️⃣ 生成代码覆盖率（禁用 GUI 相关特性）
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Generate coverage report
        run: |
          cargo llvm-cov --features server --lcov --output-path lcov.info
          cargo llvm-cov report --features server --html --output-dir coverage
      - uses: actions/upload-artifact@v4
        with:
          name: "Coverage report"
          path: coverage/

  fly-deploy:
    name: Fly Deploy
    runs-on: ubuntu-latest
    needs: [ci] # 确保 CI 成功后再触发
    concurrency: deploy-group
    steps:
      # 1️⃣ 下载仓库代码
      - uses: actions/checkout@v4
      # 2️⃣ 安装 flyctl
      - uses: superfly/flyctl-actions/setup-flyctl@master
      # 3️⃣ 部署应用到 Fly.io
      - run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
